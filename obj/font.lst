                              1 ; font.ms
                              2 ;
                              3 ;	Michael Hope, 1999
                              4 ;	michaelh@earthling.net
                              5 ;	Distrubuted under the Artistic License - see www.opensource.org
                              6 ;
                              7 	.include        "global.s"
                     0001     1 	.NEAR_CALLS = 1         ; <near_calls> - tag so that sed can change this
                              2         
                              3 	;; Changed by astorgb.pl to 1
                     0000     4 	__RGBDS__	= 0
                              5 
                              6 	
                              7 	;;  Screen dimensions 
                     0013     8 	.MAXCURSPOSX	= 0x13	; In tiles
                     0011     9 	.MAXCURSPOSY	= 0x11
                             10 
                     0080    11 	.START		= 0x80
                     0040    12 	.SELECT		= 0x40
                     0020    13 	.B		= 0x20
                     0010    14 	.A		= 0x10
                     0008    15 	.DOWN		= 0x08
                     0004    16 	.UP		= 0x04
                     0002    17 	.LEFT		= 0x02
                     0001    18 	.RIGHT		= 0x01
                             19 
                     00A0    20 	.SCREENWIDTH	= 0xA0
                     0090    21 	.SCREENHEIGHT	= 0x90
                     0007    22 	.MINWNDPOSX	= 0x07
                     0000    23 	.MINWNDPOSY	= 0x00
                     00A6    24 	.MAXWNDPOSX	= 0xA6
                     008F    25 	.MAXWNDPOSY	= 0x8F
                             26 
                     0001    27 	.VBL_IFLAG	= 0x01
                     0002    28 	.LCD_IFLAG	= 0x02
                     0004    29 	.TIM_IFLAG	= 0x04
                     0008    30 	.SIO_IFLAG	= 0x08
                     0010    31 	.JOY_IFLAG	= 0x10
                             32  
                     0000    33 	.P1		= 0x00	; Joystick: 1.1.P15.P14.P13.P12.P11.P10
                     0001    34 	.SB		= 0x01	; Serial IO data buffer
                     0002    35 	.SC		= 0x02	; Serial IO control register
                     0004    36 	.DIV		= 0x04	; Divider register
                     0005    37 	.TIMA		= 0x05	; Timer counter
                     0006    38 	.TMA		= 0x06	; Timer modulo
                     0007    39 	.TAC		= 0x07	; Timer control
                     000F    40 	.IF		= 0x0F	; Interrupt flags: 0.0.0.JST.SIO.TIM.LCD.VBL
                     0010    41 	.NR10		= 0x10	; Sound register
                     0011    42 	.NR11		= 0x11	; Sound register
                     0012    43 	.NR12		= 0x12	; Sound register
                     0013    44 	.NR13		= 0x13	; Sound register
                     0014    45 	.NR14		= 0x14	; Sound register
                     0016    46 	.NR21		= 0x16	; Sound register
                     0017    47 	.NR22		= 0x17	; Sound register
                     0018    48 	.NR23		= 0x18	; Sound register
                     0019    49 	.NR24		= 0x19	; Sound register
                     001A    50 	.NR30		= 0x1A	; Sound register
                     001B    51 	.NR31		= 0x1B	; Sound register
                     001C    52 	.NR32		= 0x1C	; Sound register
                     001D    53 	.NR33		= 0x1D	; Sound register
                     001E    54 	.NR34		= 0x1E	; Sound register
                     0020    55 	.NR41		= 0x20	; Sound register
                     0021    56 	.NR42		= 0x21	; Sound register
                     0022    57 	.NR43		= 0x22	; Sound register
                     0023    58 	.NR44		= 0x23	; Sound register
                     0024    59 	.NR50		= 0x24	; Sound register
                     0025    60 	.NR51		= 0x25	; Sound register
                     0026    61 	.NR52		= 0x26	; Sound register
                     0040    62 	.LCDC		= 0x40	; LCD control
                     0041    63 	.STAT		= 0x41	; LCD status
                     0042    64 	.SCY		= 0x42	; Scroll Y
                     0043    65 	.SCX		= 0x43	; Scroll X
                     0044    66 	.LY		= 0x44	; LCDC Y-coordinate
                     0045    67 	.LYC		= 0x45	; LY compare
                     0046    68 	.DMA		= 0x46	; DMA transfer
                     0047    69 	.BGP		= 0x47	; BG palette data
                     0048    70 	.OBP0		= 0x48	; OBJ palette 0 data
                     0049    71 	.OBP1		= 0x49	; OBJ palette 1 data
                     004A    72 	.WY		= 0x4A	; Window Y coordinate
                     004B    73 	.WX		= 0x4B	; Window X coordinate
                     004D    74 	.KEY1		= 0x4D	; CPU speed
                     004F    75 	.VBK		= 0x4F	; VRAM bank
                     0051    76 	.HDMA1		= 0x51	; DMA control 1
                     0052    77 	.HDMA2		= 0x52	; DMA control 2
                     0053    78 	.HDMA3		= 0x53	; DMA control 3
                     0054    79 	.HDMA4		= 0x54	; DMA control 4
                     0055    80 	.HDMA5		= 0x55	; DMA control 5
                     0056    81 	.RP		= 0x56	; IR port
                     0068    82 	.BCPS		= 0x68	; BG color palette specification
                     0069    83 	.BCPD		= 0x69	; BG color palette data
                     006A    84 	.OCPS		= 0x6A	; OBJ color palette specification
                     006B    85 	.OCPD		= 0x6B	; OBJ color palette data
                     0070    86 	.SVBK		= 0x70	; WRAM bank
                     00FF    87 	.IE		= 0xFF	; Interrupt enable
                             88 
                     0001    89 	.G_MODE		= 0x01	; Graphic mode
                     0002    90 	.T_MODE		= 0x02	; Text mode (bit 2)
                     0002    91 	.T_MODE_OUT	= 0x02	; Text mode output only
                     0003    92 	.T_MODE_INOUT	= 0x03	; Text mode with input
                     0004    93 	.M_NO_SCROLL	= 0x04	; Disables scrolling of the screen in text mode
                     0008    94 	.M_NO_INTERP	= 0x08	; Disables special character interpretation
                             95 
                     2000    96 	.MBC1_ROM_PAGE	= 0x2000 ; Address to write to for MBC1 switching
                             97 	
                             98 	;; Status codes for IO
                     0000    99 	.IO_IDLE	= 0x00
                     0001   100 	.IO_SENDING	= 0x01
                     0002   101 	.IO_RECEIVING	= 0x02
                     0004   102 	.IO_ERROR	= 0x04
                            103 
                            104 	;; Type of IO data
                     0066   105 	.DT_IDLE	= 0x66
                     0055   106 	.DT_RECEIVING	= 0x55
                            107 
                            108 	;; Table of routines for modes
                     01E0   109 	.MODE_TABLE	= 0x01E0
                            110 
                            111 	;; C related
                            112 	;; Overheap of a banked call.  Used for parameters
                            113 	;;  = ret + real ret + bank
                            114 
                     0001   115 	.if .NEAR_CALLS
                     0002   116 	.BANKOV		= 2
                            117 
                     0000   118 	.else
                            119 	.BANKOV		= 6
                            120 
                            121 	.endif
                            122 	
                            123 	.globl	banked_call
                            124 	.globl	banked_ret
                            125 	
                            126 	;; Global variables
                            127 	.globl	.mode
                            128 
                            129 	.globl	__cpu
                            130 
                            131 	.globl	__io_out
                            132 	.globl	__io_in
                            133 	.globl	__io_status
                            134 
                            135 	;; Global routines
                            136 	.globl	.set_mode
                            137 
                            138 	.globl	.reset
                            139 
                            140 	.globl	.display_off
                            141 
                            142 	.globl	.wait_vbl_done
                            143 
                            144 	;; Interrupt routines 
                            145 	.globl	.add_VBL
                            146 	.globl	.add_LCD
                            147 	.globl	.add_TIM
                            148 	.globl	.add_SIO
                            149 	.globl	.add_JOY
                            150 
                            151 	;; Symbols defined at link time
                     E000   152 	.STACK = 0xE000
                     C000   153 	.OAM = 0xC000
                     FF80   154 	.refresh_OAM = 0xFF80
                            155 
                            156 	;; Initialization routine   
                     0000   157 	.init = 0x000
                            158 
                            159 	;; Main user routine	
                            160 	.globl	_main
                              8 
                              9 	.globl	.cr_curs
                             10 	.globl	.adv_curs
                             11 	.globl	.cury, .curx
                             12 	.globl	.display_off
                             13 
                             14 	; Structure offsets
                     0003    15 	sfont_handle_sizeof	=	3
                     0001    16 	sfont_handle_font	=	1
                     0000    17 	sfont_handle_first_tile	=	0
                             18 
                             19 	; Encoding types - lower 2 bits of font
                     0000    20 	FONT_256ENCODING	=	0
                     0001    21 	FONT_128ENCODING	=	1
                     0002    22 	FONT_NOENCODING		=	2
                             23 
                             24 	; Other bits
                     0002    25 	FONT_BCOMPRESSED	=	2
                             26 	
                     000A    27 	.CR     		= 	0x0A          ; Unix
                     0000    28 	.SPACE			=	0x00
                             29 
                             30 	; Maximum number of fonts
                     0006    31 	.MAX_FONTS		= 	6
                             32 
                             33 	.area	_HEADER (ABS)
                             34 
   01E8                      35 	.org	.MODE_TABLE+4*.T_MODE
   01E8 C3r85r02             36 	JP	.tmode
                             37 
                             38 	.module font.ms
                             39 
                             40 	; Globals from drawing.s
                             41 	; FIXME: Hmmm... check the linkage of these
                             42 	.globl	.fg_colour
                             43 	.globl	.bg_colour
                             44 
                             45 	.area	_BSS
                             46 	; The current font
   0000                      47 font_current::
   0000                      48 	.ds	sfont_handle_sizeof
                             49 	; Cached copy of the first free tile
   0003                      50 font_first_free_tile::
   0003                      51 	.ds	1
                             52 	; Table containing descriptors for all of the fonts
   0004                      53 font_table::
   0004                      54 	.ds	sfont_handle_sizeof*.MAX_FONTS
                             55 	
                             56 	.area   _BASE
                             57 	; Copy uncompressed 16 byte tiles from (BC) to (HL), length = DE*2
                             58 	; Note: HL must be aligned on a UWORD boundry
   0000                      59 font_copy_uncompressed::
   0000 7A                   60 	ld	a,d
   0001 B3                   61 	or	e
   0002 C8                   62 	ret	z
                             63 
   0003 7C                   64 	ld	a,h
   0004 FE 98                65 	cp	#0x98
   0006 38 03                66 	jr	c,4$
   0008 D6 10                67 	sub	#0x98-0x88
   000A 67                   68 	ld	h,a
   000B                      69 4$:
   000B AF                   70 	xor	a
   000C BB                   71 	cp	e		; Special for when e=0 you will get another loop
   000D 20 01                72 	jr	nz,1$
   000F 15                   73 	dec	d
   0010                      74 1$:
   0010 F0 41                75         ldh     a,(.STAT)
   0012 CB 4F                76         bit     1,a
   0014 20 FA                77         jr      nz,#.-4
   0016 0A                   78 	ld	a,(bc)
   0017 22                   79 	ld	(hl+),a
   0018 03                   80 	inc	bc
                             81 	
   0019 F0 41                82         ldh     a,(.STAT)
   001B CB 4F                83         bit     1,a
   001D 20 FA                84         jr      nz,#.-4
   001F 0A                   85 	ld	a,(bc)
   0020 77                   86 	ld	(hl),a
   0021 03                   87 	inc	bc
                             88 
   0022 2C                   89 	inc	l
   0023 20 08                90 	jr	nz,2$
   0025 24                   91 	inc	h
   0026 7C                   92 	ld	a,h		; Special wrap-around
   0027 FE 98                93 	cp	#0x98
   0029 20 02                94 	jr	nz,2$
   002B 26 88                95 	ld	h,#0x88
   002D                      96 2$:
   002D 1D                   97 	dec	e
   002E 20 E0                98 	jr	nz,1$
   0030 15                   99 	dec	d
   0031 CB 7A               100 	bit	7,d		; -1?
   0033 28 DB               101 	jr	z,1$
   0035 C9                  102 	ret
                            103 
                            104 	; Copy a set of compressed (8 bytes/cell) tiles to VRAM
                            105 	; Sets the foreground and background colours based on the current
                            106 	; font colours
                            107 	; Entry:
                            108 	;	From (BC) to (HL), length (DE) where DE = #cells * 8
                            109 	;	Uses the current fg_colour and bg_colour fields
   0036                     110 font_copy_compressed::
   0036 7A                  111 	ld	a,d
   0037 B3                  112 	or	e
   0038 C8                  113 	ret	z		; Do nothing
                            114 
   0039 7C                  115 	ld	a,h
   003A FE 98               116 	cp	#0x98		; Take care of the 97FF -> 8800 wrap around
   003C 38 03               117 	jr	c,font_copy_compressed_loop
   003E D6 10               118 	sub	#0x98-0x88
   0040 67                  119 	ld	h,a
   0041                     120 font_copy_compressed_loop:
   0041 D5                  121 	push	de
   0042 0A                  122 	ld	a,(bc)
   0043 5F                  123 	ld	e,a
   0044 03                  124 	inc	bc
   0045 C5                  125 	push	bc
                            126 
   0046 01 00 00            127 	ld	bc,#0
                            128 				; Do the background colour first
   0049 FAr00r00            129 	ld	a,(.bg_colour)
   004C CB 47               130 	bit	0,a
   004E 28 02               131 	jr	z,font_copy_compressed_bg_grey1
   0050 06 FF               132 	ld	b,#0xFF
   0052                     133 font_copy_compressed_bg_grey1:
   0052 CB 4F               134 	bit	1,a
   0054 28 02               135 	jr	z,font_copy_compressed_bg_grey2
   0056 0E FF               136 	ld	c,#0xFF
   0058                     137 font_copy_compressed_bg_grey2:
                            138 	; BC contains the background colour
                            139 	; Compute what xoring we need to do to get the correct fg colour
   0058 57                  140 	ld	d,a
   0059 FAr00r00            141 	ld	a,(.fg_colour)
   005C AA                  142 	xor	d
   005D 57                  143 	ld	d,a
                            144 
   005E CB 42               145 	bit	0,d
   0060 28 03               146 	jr	z,font_copy_compressed_grey1
   0062 7B                  147 	ld	a,e
   0063 A8                  148 	xor	b
   0064 47                  149 	ld	b,a
   0065                     150 font_copy_compressed_grey1:
   0065 CB 4A               151 	bit	1,d
   0067 28 03               152 	jr	z,font_copy_compressed_grey2
   0069 7B                  153 	ld	a,e
   006A A9                  154 	xor	c
   006B 4F                  155 	ld	c,a
   006C                     156 font_copy_compressed_grey2:
   006C F0 41               157         ldh     a,(.STAT)
   006E CB 4F               158         bit     1,a
   0070 20 FA               159         jr      nz,#.-4
   0072 70                  160 	ld	(hl),b
   0073 23                  161 	inc	hl
   0074 F0 41               162         ldh     a,(.STAT)
   0076 CB 4F               163         bit     1,a
   0078 20 FA               164         jr      nz,#.-4
   007A 71                  165 	ld	(hl),c
   007B 23                  166 	inc	hl
   007C 7C                  167 	ld	a,h		; Take care of the 97FFF -> 8800 wrap around
   007D FE 98               168 	cp	#0x98
   007F 20 02               169 	jr	nz,1$
   0081 26 88               170 	ld	h,#0x88
   0083                     171 1$:
   0083 C1                  172 	pop	bc
   0084 D1                  173 	pop	de
   0085 1B                  174 	dec	de
   0086 7A                  175 	ld	a,d
   0087 B3                  176 	or	e
   0088 20 B7               177 	jr	nz,font_copy_compressed_loop
   008A C9                  178 	ret
                            179 	
                            180 ; Load the font HL
   008B                     181 font_load::
   008B CDr00r00            182 	call	.display_off
   008E E5                  183 	push	hl
                            184 
                            185 	; Find the first free font entry
   008F 21r05r00            186 	ld	hl,#font_table+sfont_handle_font
   0092 06 06               187 	ld	b,#.MAX_FONTS
   0094                     188 font_load_find_slot:
   0094 7E                  189 	ld	a,(hl)		; Check to see if this entry is free
   0095 23                  190 	inc	hl		; Free is 0000 for the font pointer
   0096 B6                  191 	or	(hl)
   0097 FE 00               192 	cp	#0
   0099 28 0B               193 	jr	z,font_load_found
                            194 
   009B 23                  195 	inc	hl
   009C 23                  196 	inc	hl
   009D 05                  197 	dec	b
   009E 20 F4               198 	jr	nz,font_load_find_slot
   00A0 E1                  199 	pop	hl
   00A1 21 00 00            200 	ld	hl,#0
   00A4 18 24               201 	jr	font_load_exit	; Couldn't find a free space
   00A6                     202 font_load_found:
                            203 				; HL points to the end of the free font table entry
   00A6 D1                  204 	pop	de
   00A7 72                  205 	ld	(hl),d		; Copy across the font struct pointer
   00A8 2B                  206 	dec	hl
   00A9 73                  207 	ld	(hl),e
                            208 
   00AA FAr03r00            209 	ld	a,(font_first_free_tile)
   00AD 2B                  210 	dec	hl
   00AE 77                  211 	ld	(hl),a		
                            212 
   00AF E5                  213 	push	hl
   00B0 CDr1Br01            214 	call	font_set	; Set this new font to be the default
                            215 	
                            216 	; Only copy the tiles in if were in text mode
   00B3 FAr00r00            217 	ld	a,(.mode)
   00B6 E6 02               218 	and	#.T_MODE
                            219 	
   00B8 C4rD3r00            220 	call	nz,font_copy_current
                            221 
                            222 				; Increase the 'first free tile' counter
   00BB 21r01r00            223 	ld	hl,#font_current+sfont_handle_font
   00BE 2A                  224 	ld	a,(hl+)
   00BF 66                  225 	ld	h,(hl)
   00C0 6F                  226 	ld	l,a
                            227 
   00C1 23                  228 	inc	hl		; Number of tiles used
   00C2 FAr03r00            229 	ld	a,(font_first_free_tile)
   00C5 86                  230 	add	a,(hl)
   00C6 EAr03r00            231 	ld	(font_first_free_tile),a
                            232 
   00C9 E1                  233 	pop	hl		; Return font setup in HL
   00CA                     234 font_load_exit:
                            235 	;; Turn the screen on
   00CA F0 40               236 	LDH     A,(.LCDC)
   00CC F6 81               237 	OR      #0b10000001     ; LCD           = On
                            238 				; BG            = On
   00CE E6 E7               239 	AND     #0b11100111     ; BG Chr        = 0x8800
                            240 				; BG Bank       = 0x9800
   00D0 E0 40               241 	LDH     (.LCDC),A
                            242 
   00D2 C9                  243 	RET
                            244 
                            245 	; Copy the tiles from the current font into VRAM
   00D3                     246 font_copy_current::	
                            247 				; Find the current font data
   00D3 21r01r00            248 	ld	hl,#font_current+sfont_handle_font
   00D6 2A                  249 	ld	a,(hl+)
   00D7 66                  250 	ld	h,(hl)
   00D8 6F                  251 	ld	l,a
                            252 
   00D9 23                  253 	inc	hl		; Points to the 'tiles required' entry
   00DA 5E                  254 	ld	e,(hl)
   00DB 16 00               255 	ld	d,#0
   00DD CB 13               256 	rl	e		; Multiple DE by 8
   00DF CB 12               257 	rl	d
   00E1 CB 13               258 	rl	e
   00E3 CB 12               259 	rl	d
   00E5 CB 13               260 	rl	e
   00E7 CB 12               261 	rl	d		; DE has the length of the tile data
   00E9 2B                  262 	dec	hl
                            263 
   00EA 7E                  264 	ld	a,(hl)		; Get the flags
   00EB F5                  265 	push	af		
   00EC E6 03               266 	and	#3			; Only lower 2 bits set encoding table size
                            267 
   00EE 01 80 00            268 	ld	bc,#128
   00F1 FE 01               269 	cp	#FONT_128ENCODING	; 0 for 256 char encoding table, 1 for 128 char
   00F3 28 0A               270 	jr	z,font_copy_current_copy
                            271 
   00F5 01 00 00            272 	ld	bc,#0
   00F8 FE 02               273 	cp	#FONT_NOENCODING
   00FA 28 03               274 	jr	z,font_copy_current_copy
                            275 
   00FC 01 00 01            276 	ld	bc,#256			; Must be 256 element encoding
   00FF                     277 font_copy_current_copy:
   00FF 23                  278 	inc	hl
   0100 23                  279 	inc	hl		; Points to the start of the encoding table
   0101 09                  280 	add	hl,bc		
   0102 4D                  281 	ld	c,l
   0103 44                  282 	ld	b,h		; BC points to the start of the tile data		
                            283 
                            284 	; Find the offset in VRAM for this font
   0104 FAr00r00            285 	ld	a,(font_current+sfont_handle_first_tile)	; First tile used for this font
   0107 6F                  286 	ld	l,a		
   0108 26 00               287 	ld	h,#0
   010A 29                  288 	add	hl,hl
   010B 29                  289 	add	hl,hl
   010C 29                  290 	add	hl,hl
   010D 29                  291 	add	hl,hl
                            292 
   010E 3E 90               293 	ld	a,#0x90		; Tile 0 is at 9000h
   0110 84                  294 	add	a,h
   0111 67                  295 	ld	h,a
                            296 				; Is this font compressed?
   0112 F1                  297 	pop	af		; Recover flags
   0113 CB 57               298 	bit	FONT_BCOMPRESSED,a
                            299 				; Do the jump in a mildly different way
   0115 CAr00r00            300 	jp	z,font_copy_uncompressed
   0118 C3r36r00            301 	jp	font_copy_compressed
                            302 
                            303 	; Set the current font to HL
   011B                     304 font_set::
   011B 2A                  305 	ld	a,(hl+)
   011C EAr00r00            306 	ld	(font_current),a
   011F 2A                  307 	ld	a,(hl+)
   0120 EAr01r00            308 	ld	(font_current+1),a
   0123 2A                  309 	ld	a,(hl+)
   0124 EAr02r00            310 	ld	(font_current+2),a
   0127 C9                  311 	ret
                            312 	
                            313 	;; Print a character with interpretation
   0128                     314 .put_char::
                            315 	; See if it's a special char
   0128 FE 0A               316 	cp	#.CR
   012A 20 0E               317 	jr	nz,1$
                            318 
                            319 	; Now see if were checking special chars
   012C F5                  320 	push	af
   012D FAr00r00            321 	ld	a,(.mode)
   0130 E6 08               322 	and	#.M_NO_INTERP
   0132 20 05               323 	jr	nz,2$
   0134 CDr14r02            324 	call	.cr_curs
   0137 F1                  325 	pop	af
   0138 C9                  326 	ret
   0139                     327 2$:
   0139 F1                  328 	pop	af
   013A                     329 1$:
   013A CDr51r01            330 	CALL    .set_char
   013D CDr29r02            331 	CALL    .adv_curs
   0140 C9                  332 	RET
                            333 
                            334 	;; Print a character without interpretation
   0141                     335 .out_char::
   0141 CDr51r01            336 	CALL	.set_char
   0144 CDr29r02            337 	CALL	.adv_curs
   0147 C9                  338 	RET
                            339 
                            340 	;; Delete a character
   0148                     341 .del_char::
   0148 CDrFDr01            342 	CALL	.rew_curs
   014B 3E 00               343 	LD	A,#.SPACE
   014D CDr51r01            344 	CALL	.set_char
   0150 C9                  345 	RET
                            346 
                            347 	;; Print the character in A
   0151                     348 .set_char:
   0151 F5                  349 	push	af
   0152 FAr02r00            350 	ld	a,(font_current+2)
                            351 	; Must be non-zero if the font system is setup (cant have a font in page zero)
   0155 B7                  352 	or	a
   0156 20 0E               353 	jr	nz,3$
                            354 
                            355 	; Font system is not yet setup - init it and copy in the ibm font
                            356 	; Kind of a compatibility mode
   0158 CDrC0r01            357 	call	_font_init
                            358 	
                            359 	; Need all of the tiles
   015B AF                  360 	xor	a
   015C EAr03r00            361 	ld	(font_first_free_tile),a
                            362 
                            363 	.globl	_font_load_ibm_fixed
   015F CDr00r00            364 	call	banked_call
   0162r00r00               365 	.dw	_font_load_ibm_fixed
                     0000   366 	.if __RGBDS__
                            367 	.dw	BANK(_font_load_ibm_fixed);
                     0001   368 	.else
   0164 00 00               369 	.dw	0
                            370 	.endif
   0166                     371 3$:
   0166 F1                  372 	pop	af
   0167 C5                  373 	push	bc
   0168 D5                  374 	push	de
   0169 E5                  375 	push	hl
                            376 				; Compute which tile maps to this character
   016A 5F                  377 	ld	e,a
   016B 21r01r00            378 	ld	hl,#font_current+sfont_handle_font
   016E 2A                  379 	ld	a,(hl+)
   016F 66                  380 	ld	h,(hl)
   0170 6F                  381 	ld	l,a
   0171 2A                  382 	ld	a,(hl+)
   0172 E6 03               383 	and	#3
   0174 FE 02               384 	cp	#FONT_NOENCODING
   0176 28 05               385 	jr	z,set_char_no_encoding
   0178 23                  386 	inc	hl
                            387 				; Now at the base of the encoding table
                            388 				; E is set above
   0179 16 00               389 	ld	d,#0
   017B 19                  390 	add	hl,de
   017C 5E                  391 	ld	e,(hl)		; That's the tile!
   017D                     392 set_char_no_encoding:
   017D FAr00r00            393 	ld	a,(font_current+0)
   0180 83                  394 	add	a,e
   0181 5F                  395 	ld	e,a
                            396 
   0182 FAr17r00            397 	LD      A,(.cury)       ; Y coordinate
   0185 6F                  398 	LD      L,A
   0186 26 00               399 	LD      H,#0x00
   0188 29                  400 	ADD     HL,HL
   0189 29                  401 	ADD     HL,HL
   018A 29                  402 	ADD     HL,HL
   018B 29                  403 	ADD     HL,HL
   018C 29                  404 	ADD     HL,HL
   018D FAr16r00            405 	LD      A,(.curx)       ; X coordinate
   0190 4F                  406 	LD      C,A
   0191 06 00               407 	LD      B,#0x00
   0193 09                  408 	ADD     HL,BC
   0194 01 00 98            409 	LD      BC,#0x9800
   0197 09                  410 	ADD     HL,BC
                            411 
   0198 F0 41               412         ldh     a,(.STAT)
   019A CB 4F               413         bit     1,a
   019C 20 FA               414         jr      nz,#.-4
                            415 
   019E 73                  416 	LD      (HL),E
   019F E1                  417 	POP     HL
   01A0 D1                  418 	POP     DE
   01A1 C1                  419 	POP     BC
   01A2 C9                  420 	RET
                            421 
                            422 	.area	_CODE
   0000                     423 _putchar::			; Banked
   0000 C5                  424 	PUSH	BC
   0001 F8 04               425 	LDA     HL,.BANKOV+2(SP); Skip return address
   0003 7E                  426 	LD      A,(HL)          ; A = c
   0004 CDr28r01            427 	CALL    .put_char
   0007 C1                  428 	POP	BC
   0008 C9                  429 	RET
                            430 
   0009                     431 _setchar::			; Banked
   0009 C5                  432 	PUSH	BC
   000A F8 04               433 	LDA     HL,.BANKOV+2(SP); Skip return address
   000C 7E                  434 	LD      A,(HL)          ; A = c
   000D CDr51r01            435 	CALL    .set_char
   0010 C1                  436 	POP	BC
   0011 C9                  437 	RET
                            438 
                            439 	.area	_BASE
   01A3                     440 _font_load::
   01A3 C5                  441 	push	bc
   01A4 F8 04               442 	LDA     HL,4(SP)        ; Skip return address and bc
   01A6 7E                  443 	LD      A,(HL)          ; A = c
   01A7 23                  444 	inc	hl
   01A8 66                  445 	ld	h,(hl)
   01A9 6F                  446 	ld	l,a
   01AA CDr8Br00            447 	call    font_load
   01AD E5                  448 	push	hl
   01AE D1                  449 	pop	de		; Return in DE
   01AF C1                  450 	pop	bc
   01B0 C9                  451 	RET
                            452 
   01B1                     453 _font_set::
   01B1 C5                  454 	push	bc
   01B2 F8 04               455 	LDA     HL,4(SP)        ; Skip return address
   01B4 7E                  456 	LD      A,(HL)          ; A = c
   01B5 23                  457 	inc	hl
   01B6 66                  458 	ld	h,(hl)
   01B7 6F                  459 	ld	l,a
   01B8 CDr1Br01            460 	call	font_set
   01BB C1                  461 	pop	bc
   01BC 11 00 00            462 	ld	de,#0		; Always good...
   01BF C9                  463 	RET
                            464 
   01C0                     465 _font_init::
   01C0 C5                  466 	push	bc
                            467 	.globl	.tmode
                            468 
   01C1 CDr85r02            469 	call	.tmode
                            470 
   01C4 3E 01               471 	ld	a,#1		; We use the first tile as a space _always_
   01C6 EAr03r00            472 	ld	(font_first_free_tile),a
                            473 
                            474 	; Clear the font table
   01C9 AF                  475 	xor	a
   01CA 21r04r00            476 	ld	hl,#font_table
   01CD 06 12               477 	ld	b,#sfont_handle_sizeof*.MAX_FONTS
   01CF                     478 1$:
   01CF 22                  479 	ld	(hl+),a
   01D0 05                  480 	dec	b
   01D1 20 FC               481 	jr	nz,1$
   01D3 3E 03               482 	ld	a,#3
   01D5 EAr00r00            483 	ld	(.fg_colour),a
   01D8 3E 00               484 	ld	a,#0
   01DA EAr00r00            485 	ld	(.bg_colour),a
                            486 
   01DD CDrE2r01            487 	call	.cls
   01E0 C1                  488 	pop	bc
   01E1 C9                  489 	ret
                            490 	
   01E2                     491 _cls::
   01E2                     492 .cls::	
   01E2 D5                  493 	PUSH	DE
   01E3 E5                  494 	PUSH	HL
   01E4 21 00 98            495 	LD	HL,#0x9800
   01E7 1E 20               496 	LD	E,#0x20		; E = height
   01E9                     497 1$:
   01E9 16 20               498 	LD	D,#0x20		; D = width
   01EB                     499 2$:
   01EB F0 41               500         ldh     a,(.STAT)
   01ED CB 4F               501         bit     1,a
   01EF 20 FA               502         jr      nz,#.-4
                            503 
   01F1 36 00               504 	LD	(HL),#.SPACE	; Always clear
   01F3 23                  505 	INC	HL
   01F4 15                  506 	DEC	D
   01F5 20 F4               507 	JR	NZ,2$
   01F7 1D                  508 	DEC	E
   01F8 20 EF               509 	JR	NZ,1$
   01FA E1                  510 	POP	HL
   01FB D1                  511 	POP	DE
   01FC C9                  512 	RET
                            513 
                            514 	.area	_CODE
                            515 	; Support routines
   0012                     516 _gotoxy::			; Banked
   0012 F8 02               517 	lda	hl,.BANKOV(sp)
   0014 2A                  518 	ld	a,(hl+)
   0015 EAr16r00            519 	ld	(.curx),a
   0018 7E                  520 	ld	a,(hl)
   0019 EAr17r00            521 	ld	(.cury),a
   001C C9                  522 	ret
                            523 
   001D                     524 _posx::
   001D FAr00r00            525 	LD	A,(.mode)	; Banked
   0020 E6 02               526 	AND	#.T_MODE
   0022 20 05               527 	JR	NZ,1$
   0024 C5                  528 	PUSH	BC
   0025 CDr85r02            529 	CALL	.tmode
   0028 C1                  530 	POP	BC
   0029                     531 1$:
   0029 FAr16r00            532 	LD	A,(.curx)
   002C 5F                  533 	LD	E,A
   002D C9                  534 	RET
                            535 
   002E                     536 _posy::				; Banked
   002E FAr00r00            537 	LD	A,(.mode)
   0031 E6 02               538 	AND	#.T_MODE
   0033 20 05               539 	JR	NZ,1$
   0035 C5                  540 	PUSH	BC
   0036 CDr85r02            541 	CALL	.tmode
   0039 C1                  542 	POP	BC
   003A                     543 1$:
   003A FAr17r00            544 	LD	A,(.cury)
   003D 5F                  545 	LD	E,A
   003E C9                  546 	RET
                            547 
                            548 	.area	_BASE
                            549 	;; Rewind the cursor
   01FD                     550 .rew_curs:
   01FD E5                  551 	PUSH	HL
   01FE 21r16r00            552 	LD	HL,#.curx	; X coordinate
   0201 AF                  553 	XOR	A
   0202 BE                  554 	CP	(HL)
   0203 28 03               555 	JR	Z,1$
   0205 35                  556 	DEC	(HL)
   0206 18 0A               557 	JR	99$
   0208                     558 1$:
   0208 36 13               559 	LD	(HL),#.MAXCURSPOSX
   020A 21r17r00            560 	LD	HL,#.cury	; Y coordinate
   020D AF                  561 	XOR	A
   020E BE                  562 	CP	(HL)
   020F 28 01               563 	JR	Z,99$
   0211 35                  564 	DEC	(HL)
   0212                     565 99$:
   0212 E1                  566 	POP	HL
   0213 C9                  567 	RET
                            568 
   0214                     569 .cr_curs::
   0214 E5                  570 	PUSH	HL
   0215 AF                  571 	XOR	A
   0216 EAr16r00            572 	LD	(.curx),A
   0219 21r17r00            573 	LD	HL,#.cury	; Y coordinate
   021C 3E 11               574 	LD	A,#.MAXCURSPOSY
   021E BE                  575 	CP	(HL)
   021F 28 03               576 	JR	Z,2$
   0221 34                  577 	INC	(HL)
   0222 18 03               578 	JR	99$
   0224                     579 2$:
   0224 CDr57r02            580 	CALL	.scroll
   0227                     581 99$:
   0227 E1                  582 	POP	HL
   0228 C9                  583 	RET
                            584 
   0229                     585 .adv_curs::
   0229 E5                  586 	PUSH	HL
   022A 21r16r00            587 	LD	HL,#.curx	; X coordinate
   022D 3E 13               588 	LD	A,#.MAXCURSPOSX
   022F BE                  589 	CP	(HL)
   0230 28 03               590 	JR	Z,1$
   0232 34                  591 	INC	(HL)
   0233 18 20               592 	JR	99$
   0235                     593 1$:
   0235 36 00               594 	LD	(HL),#0x00
   0237 21r17r00            595 	LD	HL,#.cury	; Y coordinate
   023A 3E 11               596 	LD	A,#.MAXCURSPOSY
   023C BE                  597 	CP	(HL)
   023D 28 03               598 	JR	Z,2$
   023F 34                  599 	INC	(HL)
   0240 18 13               600 	JR	99$
   0242                     601 2$:
                            602 	;; See if scrolling is disabled
   0242 FAr00r00            603 	LD	A,(.mode)
   0245 E6 04               604 	AND	#.M_NO_SCROLL
   0247 28 09               605 	JR	Z,3$
                            606 	;; Nope - reset the cursor to (0,0)
   0249 AF                  607 	XOR	A
   024A EAr17r00            608 	LD	(.cury),A
   024D EAr16r00            609 	LD	(.curx),A
   0250 18 03               610 	JR	99$
   0252                     611 3$:	
   0252 CDr57r02            612 	CALL	.scroll
   0255                     613 99$:
   0255 E1                  614 	POP	HL
   0256 C9                  615 	RET
                            616 
                            617 	;; Scroll the whole screen
   0257                     618 .scroll:
   0257 C5                  619 	PUSH	BC
   0258 D5                  620 	PUSH	DE
   0259 E5                  621 	PUSH	HL
   025A 21 00 98            622 	LD	HL,#0x9800
   025D 01 20 98            623 	LD	BC,#0x9800+0x20 ; BC = next line
   0260 1E 1F               624 	LD	E,#0x20-0x01	; E = height - 1
   0262                     625 1$:
   0262 16 20               626 	LD	D,#0x20		; D = width
   0264                     627 2$:
   0264 F0 41               628 	LDH	A,(.STAT)
   0266 E6 02               629 	AND	#0x02
   0268 20 FA               630 	JR	NZ,2$
                            631 
   026A 0A                  632 	LD	A,(BC)
   026B 22                  633 	LD	(HL+),A
   026C 03                  634 	INC	BC
   026D 15                  635 	DEC	D
   026E 20 F4               636 	JR	NZ,2$
   0270 1D                  637 	DEC	E
   0271 20 EF               638 	JR	NZ,1$
                            639 
   0273 16 20               640 	LD	D,#0x20
   0275                     641 3$:
   0275 F0 41               642 	LDH	A,(.STAT)
   0277 E6 02               643 	AND	#0x02
   0279 20 FA               644 	JR	NZ,3$
                            645 
   027B 3E 00               646 	LD	A,#.SPACE
   027D 22                  647 	LD	(HL+),A
   027E 15                  648 	DEC	D
   027F 20 F4               649 	JR	NZ,3$
   0281 E1                  650 	POP	HL
   0282 D1                  651 	POP	DE
   0283 C1                  652 	POP	BC
   0284 C9                  653 	RET
                            654 
                            655 	.area	_BSS
   0016                     656 .curx::				; Cursor position
   0016                     657 	.ds	0x01
   0017                     658 .cury::
   0017                     659 	.ds	0x01
                            660 
                            661 	.area	_BASE
                            662 
                            663 	.globl	.vbl
                            664 	.globl	.lcd
                            665 	.globl	.int_0x40
                            666 	.globl	.int_0x48
                            667 	.globl	.remove_int
                            668 
                            669 	;; Enter text mode
   0285                     670 .tmode::
   0285 F3                  671 	DI			; Disable interrupts
                            672 
                            673 	;; Turn the screen off
   0286 F0 40               674 	LDH	A,(.LCDC)
   0288 CB 7F               675 	BIT	7,A
   028A 28 15               676 	JR	Z,1$
                            677 
                            678 	;; Turn the screen off
   028C CDr00r00            679 	CALL	.display_off
                            680 
                            681 	;; Remove any interrupts setup by the drawing routine
   028F 01r00r00            682 	LD	BC,#.vbl
   0292 21r00r00            683 	LD	HL,#.int_0x40
   0295 CDr00r00            684 	CALL	.remove_int
   0298 01r00r00            685 	LD	BC,#.lcd
   029B 21r00r00            686 	LD	HL,#.int_0x48
   029E CDr00r00            687 	CALL	.remove_int
   02A1                     688 1$:
                            689 
   02A1 CDrAEr02            690 	CALL	.tmode_out
                            691 
                            692 	;; Turn the screen on
   02A4 F0 40               693 	LDH	A,(.LCDC)
   02A6 F6 81               694 	OR	#0b10000001	; LCD		= On
                            695 				; BG		= On
   02A8 E6 E7               696 	AND	#0b11100111	; BG Chr	= 0x8800
                            697 				; BG Bank	= 0x9800
   02AA E0 40               698 	LDH	(.LCDC),A
                            699 
   02AC FB                  700 	EI			; Enable interrupts
                            701 
   02AD C9                  702 	RET
                            703 
                            704 	;; Text mode (out only)
   02AE                     705 .tmode_out::
   02AE AF                  706 	XOR	A
   02AF EAr16r00            707 	LD	(.curx),A
   02B2 EAr17r00            708 	LD	(.cury),A
                            709 
                            710 	;; Clear screen
   02B5 CDrE2r01            711 	CALL	.cls
                            712 
   02B8 3E 02               713 	LD	A,#.T_MODE
   02BA EAr00r00            714 	LD	(.mode),A
                            715 
   02BD C9                  716 	RET
